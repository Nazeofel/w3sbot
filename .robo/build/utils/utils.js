const { EmbedBuilder } = require("discord.js");
const { MessageEmbed } = require("discord.js");
function generateEmbedMessage(message, eventType) {
    const channel = message.guild.channels.cache.find((ch)=>ch.id === message.channelId);
    let event;
    switch(eventType){
        case 'updated':
            event = 'UPDATE';
            break;
        case 'deleted':
            event = 'DELETE';
            break;
    }
    const embed = new MessageEmbed().setColor(0x0099ff).setTitle(`AUDIT LOG EVENT: ${event}`).addFields({
        name: "ACTION: ",
        value: `Message ${eventType}`
    }).addFields({
        name: "USER: ",
        value: `${message.author.username}${message.author.discriminator === '0' ? '' : '#' + message.author.discriminator} (${message.author.id})`
    }).addFields({
        name: "CHANNEL: ",
        value: `${channel.name}`
    });
    if (eventType === 'updated') {
        embed.addFields({
            name: "Old message content",
            value: message.content
        }).addFields({
            name: "New message content",
            value: message.reactions.message.content
        });
    } else if (eventType === 'deleted') {
        embed.addFields({
            name: "Deleted message content",
            value: message.content
        });
    }
    embed.setTimestamp();
    return embed;
}
export function generateSearchEmbedMessage(response) {
    const embed = new MessageEmbed().setColor(0x0099ff).setTitle(`Search Results`);
    if (response && response.results.length > 0) {
        for(let i = 0; i < response.results.length; i++){
            const r = response.results[i];
            embed.addFields({
                name: `[${r.url}](${r.url})`,
                value: `${r.description})`
            });
        }
    }
    embed.setTimestamp();
    return embed;
}
export default generateEmbedMessage;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxQcm9qZWt0aVxcZGlzY29yZC1ib3RzXFx3M2JvdFxcc3JjXFx1dGlsc1xcdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBFbWJlZEJ1aWxkZXIgfSA9IHJlcXVpcmUoXCJkaXNjb3JkLmpzXCIpO1xyXG5jb25zdCB7IE1lc3NhZ2VFbWJlZCB9ID0gcmVxdWlyZShcImRpc2NvcmQuanNcIik7XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZUVtYmVkTWVzc2FnZSAobWVzc2FnZSwgZXZlbnRUeXBlKSB7XHJcblxyXG4gICAgY29uc3QgY2hhbm5lbCA9IG1lc3NhZ2UuZ3VpbGQuY2hhbm5lbHMuY2FjaGUuZmluZCgoY2gpID0+IGNoLmlkID09PSBtZXNzYWdlLmNoYW5uZWxJZCk7XHJcbiAgICBsZXQgZXZlbnQ7XHJcbiAgICBzd2l0Y2ggKGV2ZW50VHlwZSkge1xyXG4gICAgICBjYXNlICd1cGRhdGVkJzpcclxuICAgICAgICBldmVudCA9ICdVUERBVEUnO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdkZWxldGVkJzpcclxuICAgICAgICBldmVudCA9ICdERUxFVEUnO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGVtYmVkID0gbmV3IE1lc3NhZ2VFbWJlZCgpXHJcbiAgICAuc2V0Q29sb3IoMHgwMDk5ZmYpXHJcbiAgICAuc2V0VGl0bGUoYEFVRElUIExPRyBFVkVOVDogJHtldmVudH1gKVxyXG4gICAgLmFkZEZpZWxkcyhcclxuICAgICAge1xyXG4gICAgICAgIG5hbWU6IFwiQUNUSU9OOiBcIixcclxuICAgICAgICB2YWx1ZTogYE1lc3NhZ2UgJHtldmVudFR5cGV9YFxyXG4gICAgICB9LFxyXG4gICAgKVxyXG4gICAgLmFkZEZpZWxkcyhcclxuICAgICAge1xyXG4gICAgICAgIG5hbWU6IFwiVVNFUjogXCIsXHJcbiAgICAgICAgdmFsdWU6IGAke21lc3NhZ2UuYXV0aG9yLnVzZXJuYW1lfSR7bWVzc2FnZS5hdXRob3IuZGlzY3JpbWluYXRvciA9PT0gJzAnID8gJycgOiAnIycrbWVzc2FnZS5hdXRob3IuZGlzY3JpbWluYXRvcn0gKCR7bWVzc2FnZS5hdXRob3IuaWR9KWBcclxuICAgICAgfSxcclxuICAgIClcclxuICAgIC5hZGRGaWVsZHMoXHJcbiAgICAgIHtcclxuICAgICAgICBuYW1lOiBcIkNIQU5ORUw6IFwiLFxyXG4gICAgICAgIHZhbHVlOiBgJHtjaGFubmVsLm5hbWV9YFxyXG4gICAgICB9LFxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoZXZlbnRUeXBlID09PSAndXBkYXRlZCcpIHtcclxuICAgICAgZW1iZWQuYWRkRmllbGRzKFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIG5hbWU6IFwiT2xkIG1lc3NhZ2UgY29udGVudFwiLFxyXG4gICAgICAgICAgdmFsdWU6IG1lc3NhZ2UuY29udGVudFxyXG4gICAgICAgIH0sXHJcbiAgICAgIClcclxuICAgICAgLmFkZEZpZWxkcyhcclxuICAgICAgICB7XHJcbiAgICAgICAgICBuYW1lOiBcIk5ldyBtZXNzYWdlIGNvbnRlbnRcIixcclxuICAgICAgICAgIHZhbHVlOiBtZXNzYWdlLnJlYWN0aW9ucy5tZXNzYWdlLmNvbnRlbnRcclxuICAgICAgICB9LFxyXG4gICAgICApXHJcbiAgICB9IGVsc2UgaWYgKGV2ZW50VHlwZSA9PT0gJ2RlbGV0ZWQnKSB7XHJcbiAgICAgIGVtYmVkLmFkZEZpZWxkcyhcclxuICAgICAgICB7XHJcbiAgICAgICAgICBuYW1lOiBcIkRlbGV0ZWQgbWVzc2FnZSBjb250ZW50XCIsXHJcbiAgICAgICAgICB2YWx1ZTogbWVzc2FnZS5jb250ZW50XHJcbiAgICAgICAgfSxcclxuICAgICAgKVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBlbWJlZC5zZXRUaW1lc3RhbXAoKTtcclxuICAgIHJldHVybiBlbWJlZDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlU2VhcmNoRW1iZWRNZXNzYWdlIChyZXNwb25zZSkge1xyXG5cclxuICBjb25zdCBlbWJlZCA9IG5ldyBNZXNzYWdlRW1iZWQoKVxyXG4gIC5zZXRDb2xvcigweDAwOTlmZilcclxuICAuc2V0VGl0bGUoYFNlYXJjaCBSZXN1bHRzYCk7XHJcblxyXG4gIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5yZXN1bHRzLmxlbmd0aCA+IDApIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzcG9uc2UucmVzdWx0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCByID0gcmVzcG9uc2UucmVzdWx0c1tpXTtcclxuICAgICAgZW1iZWQuYWRkRmllbGRzKHtcclxuICAgICAgICBuYW1lOiBgWyR7ci51cmx9XSgke3IudXJsfSlgLFxyXG4gICAgICAgIHZhbHVlOiBgJHtyLmRlc2NyaXB0aW9ufSlgXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBlbWJlZC5zZXRUaW1lc3RhbXAoKTtcclxuICByZXR1cm4gZW1iZWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGdlbmVyYXRlRW1iZWRNZXNzYWdlOyJdLCJuYW1lcyI6WyJFbWJlZEJ1aWxkZXIiLCJyZXF1aXJlIiwiTWVzc2FnZUVtYmVkIiwiZ2VuZXJhdGVFbWJlZE1lc3NhZ2UiLCJtZXNzYWdlIiwiZXZlbnRUeXBlIiwiY2hhbm5lbCIsImd1aWxkIiwiY2hhbm5lbHMiLCJjYWNoZSIsImZpbmQiLCJjaCIsImlkIiwiY2hhbm5lbElkIiwiZXZlbnQiLCJlbWJlZCIsInNldENvbG9yIiwic2V0VGl0bGUiLCJhZGRGaWVsZHMiLCJuYW1lIiwidmFsdWUiLCJhdXRob3IiLCJ1c2VybmFtZSIsImRpc2NyaW1pbmF0b3IiLCJjb250ZW50IiwicmVhY3Rpb25zIiwic2V0VGltZXN0YW1wIiwiZ2VuZXJhdGVTZWFyY2hFbWJlZE1lc3NhZ2UiLCJyZXNwb25zZSIsInJlc3VsdHMiLCJsZW5ndGgiLCJpIiwiciIsInVybCIsImRlc2NyaXB0aW9uIl0s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