const { MessageEmbed } = require("discord.js");
function generateEmbedMessage(message, eventType) {
    const channel = message.guild.channels.cache.find((ch)=>ch.id === message.channelId);
    let event;
    switch(eventType){
        case 'updated':
            event = 'UPDATE';
            break;
        case 'deleted':
            event = 'DELETE';
            break;
    }
    const embed = new MessageEmbed().setColor(0x0099ff).setTitle(`AUDIT LOG EVENT: ${event}`).addFields({
        name: "ACTION: ",
        value: `Message ${eventType}`
    }).addFields({
        name: "USER: ",
        value: `${message.author.username}${message.author.discriminator === '0' ? '' : '#' + message.author.discriminator} (${message.author.id})`
    }).addFields({
        name: "CHANNEL: ",
        value: `${channel.name}`
    });
    if (eventType === 'updated') {
        embed.addFields({
            name: "Old message content",
            value: message.content
        }).addFields({
            name: "New message content",
            value: message.reactions.message.content
        });
    } else if (eventType === 'deleted') {
        embed.addFields({
            name: "Deleted message content",
            value: message.content
        });
    }
    embed.setTimestamp();
    return embed;
}
export function generateSearchEmbedMessage(response) {
    const embed = new MessageEmbed().setColor(0x0099ff).setTitle(`Search Results`);
    if (response && response.results.length > 0) {
        for(let i = 0; i < response.results.length; i++){
            const r = response.results[i];
            embed.addFields({
                name: `[${r.url}](${r.url})`,
                value: `${r.description})`
            });
        }
    }
    embed.setTimestamp();
    return embed;
}
export default generateEmbedMessage;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxQcm9qZWt0aVxcZGlzY29yZC1ib3RzXFx3M2JvdFxcc3JjXFx1dGlsc1xcdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBNZXNzYWdlRW1iZWQgfSA9IHJlcXVpcmUoXCJkaXNjb3JkLmpzXCIpO1xyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGVFbWJlZE1lc3NhZ2UgKG1lc3NhZ2UsIGV2ZW50VHlwZSkge1xyXG5cclxuICAgIGNvbnN0IGNoYW5uZWwgPSBtZXNzYWdlLmd1aWxkLmNoYW5uZWxzLmNhY2hlLmZpbmQoKGNoKSA9PiBjaC5pZCA9PT0gbWVzc2FnZS5jaGFubmVsSWQpO1xyXG4gICAgbGV0IGV2ZW50O1xyXG4gICAgc3dpdGNoIChldmVudFR5cGUpIHtcclxuICAgICAgY2FzZSAndXBkYXRlZCc6XHJcbiAgICAgICAgZXZlbnQgPSAnVVBEQVRFJztcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnZGVsZXRlZCc6XHJcbiAgICAgICAgZXZlbnQgPSAnREVMRVRFJztcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBlbWJlZCA9IG5ldyBNZXNzYWdlRW1iZWQoKVxyXG4gICAgLnNldENvbG9yKDB4MDA5OWZmKVxyXG4gICAgLnNldFRpdGxlKGBBVURJVCBMT0cgRVZFTlQ6ICR7ZXZlbnR9YClcclxuICAgIC5hZGRGaWVsZHMoXHJcbiAgICAgIHtcclxuICAgICAgICBuYW1lOiBcIkFDVElPTjogXCIsXHJcbiAgICAgICAgdmFsdWU6IGBNZXNzYWdlICR7ZXZlbnRUeXBlfWBcclxuICAgICAgfSxcclxuICAgIClcclxuICAgIC5hZGRGaWVsZHMoXHJcbiAgICAgIHtcclxuICAgICAgICBuYW1lOiBcIlVTRVI6IFwiLFxyXG4gICAgICAgIHZhbHVlOiBgJHttZXNzYWdlLmF1dGhvci51c2VybmFtZX0ke21lc3NhZ2UuYXV0aG9yLmRpc2NyaW1pbmF0b3IgPT09ICcwJyA/ICcnIDogJyMnK21lc3NhZ2UuYXV0aG9yLmRpc2NyaW1pbmF0b3J9ICgke21lc3NhZ2UuYXV0aG9yLmlkfSlgXHJcbiAgICAgIH0sXHJcbiAgICApXHJcbiAgICAuYWRkRmllbGRzKFxyXG4gICAgICB7XHJcbiAgICAgICAgbmFtZTogXCJDSEFOTkVMOiBcIixcclxuICAgICAgICB2YWx1ZTogYCR7Y2hhbm5lbC5uYW1lfWBcclxuICAgICAgfSxcclxuICAgICk7XHJcblxyXG4gICAgaWYgKGV2ZW50VHlwZSA9PT0gJ3VwZGF0ZWQnKSB7XHJcbiAgICAgIGVtYmVkLmFkZEZpZWxkcyhcclxuICAgICAgICB7XHJcbiAgICAgICAgICBuYW1lOiBcIk9sZCBtZXNzYWdlIGNvbnRlbnRcIixcclxuICAgICAgICAgIHZhbHVlOiBtZXNzYWdlLmNvbnRlbnRcclxuICAgICAgICB9LFxyXG4gICAgICApXHJcbiAgICAgIC5hZGRGaWVsZHMoXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgbmFtZTogXCJOZXcgbWVzc2FnZSBjb250ZW50XCIsXHJcbiAgICAgICAgICB2YWx1ZTogbWVzc2FnZS5yZWFjdGlvbnMubWVzc2FnZS5jb250ZW50XHJcbiAgICAgICAgfSxcclxuICAgICAgKVxyXG4gICAgfSBlbHNlIGlmIChldmVudFR5cGUgPT09ICdkZWxldGVkJykge1xyXG4gICAgICBlbWJlZC5hZGRGaWVsZHMoXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgbmFtZTogXCJEZWxldGVkIG1lc3NhZ2UgY29udGVudFwiLFxyXG4gICAgICAgICAgdmFsdWU6IG1lc3NhZ2UuY29udGVudFxyXG4gICAgICAgIH0sXHJcbiAgICAgIClcclxuICAgIH1cclxuXHJcblxyXG4gICAgZW1iZWQuc2V0VGltZXN0YW1wKCk7XHJcbiAgICByZXR1cm4gZW1iZWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVNlYXJjaEVtYmVkTWVzc2FnZSAocmVzcG9uc2UpIHtcclxuXHJcbiAgY29uc3QgZW1iZWQgPSBuZXcgTWVzc2FnZUVtYmVkKClcclxuICAuc2V0Q29sb3IoMHgwMDk5ZmYpXHJcbiAgLnNldFRpdGxlKGBTZWFyY2ggUmVzdWx0c2ApO1xyXG5cclxuICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2UucmVzdWx0cy5sZW5ndGggPiAwKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3BvbnNlLnJlc3VsdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3QgciA9IHJlc3BvbnNlLnJlc3VsdHNbaV07XHJcbiAgICAgIGVtYmVkLmFkZEZpZWxkcyh7XHJcbiAgICAgICAgbmFtZTogYFske3IudXJsfV0oJHtyLnVybH0pYCxcclxuICAgICAgICB2YWx1ZTogYCR7ci5kZXNjcmlwdGlvbn0pYFxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZW1iZWQuc2V0VGltZXN0YW1wKCk7XHJcbiAgcmV0dXJuIGVtYmVkO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBnZW5lcmF0ZUVtYmVkTWVzc2FnZTsiXSwibmFtZXMiOlsiTWVzc2FnZUVtYmVkIiwicmVxdWlyZSIsImdlbmVyYXRlRW1iZWRNZXNzYWdlIiwibWVzc2FnZSIsImV2ZW50VHlwZSIsImNoYW5uZWwiLCJndWlsZCIsImNoYW5uZWxzIiwiY2FjaGUiLCJmaW5kIiwiY2giLCJpZCIsImNoYW5uZWxJZCIsImV2ZW50IiwiZW1iZWQiLCJzZXRDb2xvciIsInNldFRpdGxlIiwiYWRkRmllbGRzIiwibmFtZSIsInZhbHVlIiwiYXV0aG9yIiwidXNlcm5hbWUiLCJkaXNjcmltaW5hdG9yIiwiY29udGVudCIsInJlYWN0aW9ucyIsInNldFRpbWVzdGFtcCIsImdlbmVyYXRlU2VhcmNoRW1iZWRNZXNzYWdlIiwicmVzcG9uc2UiLCJyZXN1bHRzIiwibGVuZ3RoIiwiaSIsInIiLCJ1cmwiLCJkZXNjcmlwdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxFQUFFQSxZQUFZLEVBQUUsR0FBR0MsUUFBUTtBQUVqQyxTQUFTQyxxQkFBc0JDLE9BQU8sRUFBRUMsU0FBUztJQUU3QyxNQUFNQyxVQUFVRixRQUFRRyxLQUFLLENBQUNDLFFBQVEsQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUMsQ0FBQ0MsS0FBT0EsR0FBR0MsRUFBRSxLQUFLUixRQUFRUyxTQUFTO0lBQ3JGLElBQUlDO0lBQ0osT0FBUVQ7UUFDTixLQUFLO1lBQ0hTLFFBQVE7WUFDUjtRQUNGLEtBQUs7WUFDSEEsUUFBUTtZQUNSO0lBQ0o7SUFFQSxNQUFNQyxRQUFRLElBQUlkLGVBQ2pCZSxRQUFRLENBQUMsVUFDVEMsUUFBUSxDQUFDLENBQUMsaUJBQWlCLEVBQUVILE1BQU0sQ0FBQyxFQUNwQ0ksU0FBUyxDQUNSO1FBQ0VDLE1BQU07UUFDTkMsT0FBTyxDQUFDLFFBQVEsRUFBRWYsVUFBVSxDQUFDO0lBQy9CLEdBRURhLFNBQVMsQ0FDUjtRQUNFQyxNQUFNO1FBQ05DLE9BQU8sQ0FBQyxFQUFFaEIsUUFBUWlCLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDLEVBQUVsQixRQUFRaUIsTUFBTSxDQUFDRSxhQUFhLEtBQUssTUFBTSxLQUFLLE1BQUluQixRQUFRaUIsTUFBTSxDQUFDRSxhQUFhLENBQUMsRUFBRSxFQUFFbkIsUUFBUWlCLE1BQU0sQ0FBQ1QsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMzSSxHQUVETSxTQUFTLENBQ1I7UUFDRUMsTUFBTTtRQUNOQyxPQUFPLENBQUMsRUFBRWQsUUFBUWEsSUFBSSxDQUFDLENBQUM7SUFDMUI7SUFHRixJQUFJZCxjQUFjLFdBQVc7UUFDM0JVLE1BQU1HLFNBQVMsQ0FDYjtZQUNFQyxNQUFNO1lBQ05DLE9BQU9oQixRQUFRb0IsT0FBTztRQUN4QixHQUVETixTQUFTLENBQ1I7WUFDRUMsTUFBTTtZQUNOQyxPQUFPaEIsUUFBUXFCLFNBQVMsQ0FBQ3JCLE9BQU8sQ0FBQ29CLE9BQU87UUFDMUM7SUFFSixPQUFPLElBQUluQixjQUFjLFdBQVc7UUFDbENVLE1BQU1HLFNBQVMsQ0FDYjtZQUNFQyxNQUFNO1lBQ05DLE9BQU9oQixRQUFRb0IsT0FBTztRQUN4QjtJQUVKO0lBR0FULE1BQU1XLFlBQVk7SUFDbEIsT0FBT1g7QUFDWDtBQUVBLE9BQU8sU0FBU1ksMkJBQTRCQyxRQUFRO0lBRWxELE1BQU1iLFFBQVEsSUFBSWQsZUFDakJlLFFBQVEsQ0FBQyxVQUNUQyxRQUFRLENBQUMsQ0FBQyxjQUFjLENBQUM7SUFFMUIsSUFBSVcsWUFBWUEsU0FBU0MsT0FBTyxDQUFDQyxNQUFNLEdBQUcsR0FBRztRQUMzQyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUgsU0FBU0MsT0FBTyxDQUFDQyxNQUFNLEVBQUVDLElBQUs7WUFDaEQsTUFBTUMsSUFBSUosU0FBU0MsT0FBTyxDQUFDRSxFQUFFO1lBQzdCaEIsTUFBTUcsU0FBUyxDQUFDO2dCQUNkQyxNQUFNLENBQUMsQ0FBQyxFQUFFYSxFQUFFQyxHQUFHLENBQUMsRUFBRSxFQUFFRCxFQUFFQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUM1QmIsT0FBTyxDQUFDLEVBQUVZLEVBQUVFLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDNUI7UUFDRjtJQUNGO0lBRUFuQixNQUFNVyxZQUFZO0lBQ2xCLE9BQU9YO0FBQ1Q7QUFFQSxlQUFlWixxQkFBcUIifQ==