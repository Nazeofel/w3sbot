const { MessageEmbed } = require("discord.js");
function generateEmbedMessage(message, eventType) {
    const channel = message.guild.channels.cache.find((ch)=>ch.id === message.channelId);
    let event;
    switch(eventType){
        case 'updated':
            event = 'UPDATE';
            break;
        case 'deleted':
            event = 'DELETE';
            break;
    }
    const embed = new MessageEmbed().setColor(0x0099ff).setTitle(`AUDIT LOG EVENT: ${event}`).addFields({
        name: "ACTION: ",
        value: `Message ${eventType}`
    }).addFields({
        name: "USER: ",
        value: `${message.author.username}${message.author.discriminator === '0' ? '' : '#' + message.author.discriminator} (${message.author.id})`
    }).addFields({
        name: "CHANNEL: ",
        value: `${channel.name}`
    });
    if (eventType === 'updated') {
        embed.addFields({
            name: "Old message content",
            value: message.content
        }).addFields({
            name: "New message content",
            value: message.reactions.message.content
        });
    } else if (eventType === 'deleted') {
        embed.addFields({
            name: "Deleted message content",
            value: message.content
        });
    }
    embed.setTimestamp();
    return embed;
}
export function generateSearchEmbedMessage(response) {
    const embed = new MessageEmbed().setColor(0x0099ff).setTitle(`Search Results`);
    if (response && response.results.length > 0) {
        for(let i = 0; i < response.results.length; i++){
            const r = response.results[i];
            embed.addFields({
                name: `[${r.url}](${r.url})`,
                value: `${r.description})`
            });
        }
    }
    embed.setTimestamp();
    return embed;
}
export default generateEmbedMessage;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcY2Vsc2lcXERvY3VtZW50c1xcUHJvZ3JhbW1pbmdcXFdvcmtcXHRlc3RzXFx3M3Nib3RcXHNyY1xcdXRpbHNcXHV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgTWVzc2FnZUVtYmVkIH0gPSByZXF1aXJlKFwiZGlzY29yZC5qc1wiKTtcclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlRW1iZWRNZXNzYWdlIChtZXNzYWdlLCBldmVudFR5cGUpIHtcclxuXHJcbiAgICBjb25zdCBjaGFubmVsID0gbWVzc2FnZS5ndWlsZC5jaGFubmVscy5jYWNoZS5maW5kKChjaCkgPT4gY2guaWQgPT09IG1lc3NhZ2UuY2hhbm5lbElkKTtcclxuICAgIGxldCBldmVudDtcclxuICAgIHN3aXRjaCAoZXZlbnRUeXBlKSB7XHJcbiAgICAgIGNhc2UgJ3VwZGF0ZWQnOlxyXG4gICAgICAgIGV2ZW50ID0gJ1VQREFURSc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ2RlbGV0ZWQnOlxyXG4gICAgICAgIGV2ZW50ID0gJ0RFTEVURSc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZW1iZWQgPSBuZXcgTWVzc2FnZUVtYmVkKClcclxuICAgIC5zZXRDb2xvcigweDAwOTlmZilcclxuICAgIC5zZXRUaXRsZShgQVVESVQgTE9HIEVWRU5UOiAke2V2ZW50fWApXHJcbiAgICAuYWRkRmllbGRzKFxyXG4gICAgICB7XHJcbiAgICAgICAgbmFtZTogXCJBQ1RJT046IFwiLFxyXG4gICAgICAgIHZhbHVlOiBgTWVzc2FnZSAke2V2ZW50VHlwZX1gXHJcbiAgICAgIH0sXHJcbiAgICApXHJcbiAgICAuYWRkRmllbGRzKFxyXG4gICAgICB7XHJcbiAgICAgICAgbmFtZTogXCJVU0VSOiBcIixcclxuICAgICAgICB2YWx1ZTogYCR7bWVzc2FnZS5hdXRob3IudXNlcm5hbWV9JHttZXNzYWdlLmF1dGhvci5kaXNjcmltaW5hdG9yID09PSAnMCcgPyAnJyA6ICcjJyttZXNzYWdlLmF1dGhvci5kaXNjcmltaW5hdG9yfSAoJHttZXNzYWdlLmF1dGhvci5pZH0pYFxyXG4gICAgICB9LFxyXG4gICAgKVxyXG4gICAgLmFkZEZpZWxkcyhcclxuICAgICAge1xyXG4gICAgICAgIG5hbWU6IFwiQ0hBTk5FTDogXCIsXHJcbiAgICAgICAgdmFsdWU6IGAke2NoYW5uZWwubmFtZX1gXHJcbiAgICAgIH0sXHJcbiAgICApO1xyXG5cclxuICAgIGlmIChldmVudFR5cGUgPT09ICd1cGRhdGVkJykge1xyXG4gICAgICBlbWJlZC5hZGRGaWVsZHMoXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgbmFtZTogXCJPbGQgbWVzc2FnZSBjb250ZW50XCIsXHJcbiAgICAgICAgICB2YWx1ZTogbWVzc2FnZS5jb250ZW50XHJcbiAgICAgICAgfSxcclxuICAgICAgKVxyXG4gICAgICAuYWRkRmllbGRzKFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIG5hbWU6IFwiTmV3IG1lc3NhZ2UgY29udGVudFwiLFxyXG4gICAgICAgICAgdmFsdWU6IG1lc3NhZ2UucmVhY3Rpb25zLm1lc3NhZ2UuY29udGVudFxyXG4gICAgICAgIH0sXHJcbiAgICAgIClcclxuICAgIH0gZWxzZSBpZiAoZXZlbnRUeXBlID09PSAnZGVsZXRlZCcpIHtcclxuICAgICAgZW1iZWQuYWRkRmllbGRzKFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIG5hbWU6IFwiRGVsZXRlZCBtZXNzYWdlIGNvbnRlbnRcIixcclxuICAgICAgICAgIHZhbHVlOiBtZXNzYWdlLmNvbnRlbnRcclxuICAgICAgICB9LFxyXG4gICAgICApXHJcbiAgICB9XHJcblxyXG5cclxuICAgIGVtYmVkLnNldFRpbWVzdGFtcCgpO1xyXG4gICAgcmV0dXJuIGVtYmVkO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVTZWFyY2hFbWJlZE1lc3NhZ2UgKHJlc3BvbnNlKSB7XHJcblxyXG4gIGNvbnN0IGVtYmVkID0gbmV3IE1lc3NhZ2VFbWJlZCgpXHJcbiAgLnNldENvbG9yKDB4MDA5OWZmKVxyXG4gIC5zZXRUaXRsZShgU2VhcmNoIFJlc3VsdHNgKTtcclxuXHJcbiAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnJlc3VsdHMubGVuZ3RoID4gMCkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXNwb25zZS5yZXN1bHRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IHIgPSByZXNwb25zZS5yZXN1bHRzW2ldO1xyXG4gICAgICBlbWJlZC5hZGRGaWVsZHMoe1xyXG4gICAgICAgIG5hbWU6IGBbJHtyLnVybH1dKCR7ci51cmx9KWAsXHJcbiAgICAgICAgdmFsdWU6IGAke3IuZGVzY3JpcHRpb259KWBcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGVtYmVkLnNldFRpbWVzdGFtcCgpO1xyXG4gIHJldHVybiBlbWJlZDtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZ2VuZXJhdGVFbWJlZE1lc3NhZ2U7Il0sIm5hbWVzIjpbIk1lc3NhZ2VFbWJlZCIsInJlcXVpcmUiLCJnZW5lcmF0ZUVtYmVkTWVzc2FnZSIsIm1lc3NhZ2UiLCJldmVudFR5cGUiLCJjaGFubmVsIiwiZ3VpbGQiLCJjaGFubmVscyIsImNhY2hlIiwiZmluZCIsImNoIiwiaWQiLCJjaGFubmVsSWQiLCJldmVudCIsImVtYmVkIiwic2V0Q29sb3IiLCJzZXRUaXRsZSIsImFkZEZpZWxkcyIsIm5hbWUiLCJ2YWx1ZSIsImF1dGhvciIsInVzZXJuYW1lIiwiZGlzY3JpbWluYXRvciIsImNvbnRlbnQiLCJyZWFjdGlvbnMiLCJzZXRUaW1lc3RhbXAiLCJnZW5lcmF0ZVNlYXJjaEVtYmVkTWVzc2FnZSIsInJlc3BvbnNlIiwicmVzdWx0cyIsImxlbmd0aCIsImkiLCJyIiwidXJsIiwiZGVzY3JpcHRpb24iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sRUFBRUEsWUFBWSxFQUFFLEdBQUdDLFFBQVE7QUFFakMsU0FBU0MscUJBQXNCQyxPQUFPLEVBQUVDLFNBQVM7SUFFN0MsTUFBTUMsVUFBVUYsUUFBUUcsS0FBSyxDQUFDQyxRQUFRLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDLENBQUNDLEtBQU9BLEdBQUdDLEVBQUUsS0FBS1IsUUFBUVMsU0FBUztJQUNyRixJQUFJQztJQUNKLE9BQVFUO1FBQ04sS0FBSztZQUNIUyxRQUFRO1lBQ1I7UUFDRixLQUFLO1lBQ0hBLFFBQVE7WUFDUjtJQUNKO0lBRUEsTUFBTUMsUUFBUSxJQUFJZCxlQUNqQmUsUUFBUSxDQUFDLFVBQ1RDLFFBQVEsQ0FBQyxDQUFDLGlCQUFpQixFQUFFSCxNQUFNLENBQUMsRUFDcENJLFNBQVMsQ0FDUjtRQUNFQyxNQUFNO1FBQ05DLE9BQU8sQ0FBQyxRQUFRLEVBQUVmLFVBQVUsQ0FBQztJQUMvQixHQUVEYSxTQUFTLENBQ1I7UUFDRUMsTUFBTTtRQUNOQyxPQUFPLENBQUMsRUFBRWhCLFFBQVFpQixNQUFNLENBQUNDLFFBQVEsQ0FBQyxFQUFFbEIsUUFBUWlCLE1BQU0sQ0FBQ0UsYUFBYSxLQUFLLE1BQU0sS0FBSyxNQUFJbkIsUUFBUWlCLE1BQU0sQ0FBQ0UsYUFBYSxDQUFDLEVBQUUsRUFBRW5CLFFBQVFpQixNQUFNLENBQUNULEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0ksR0FFRE0sU0FBUyxDQUNSO1FBQ0VDLE1BQU07UUFDTkMsT0FBTyxDQUFDLEVBQUVkLFFBQVFhLElBQUksQ0FBQyxDQUFDO0lBQzFCO0lBR0YsSUFBSWQsY0FBYyxXQUFXO1FBQzNCVSxNQUFNRyxTQUFTLENBQ2I7WUFDRUMsTUFBTTtZQUNOQyxPQUFPaEIsUUFBUW9CLE9BQU87UUFDeEIsR0FFRE4sU0FBUyxDQUNSO1lBQ0VDLE1BQU07WUFDTkMsT0FBT2hCLFFBQVFxQixTQUFTLENBQUNyQixPQUFPLENBQUNvQixPQUFPO1FBQzFDO0lBRUosT0FBTyxJQUFJbkIsY0FBYyxXQUFXO1FBQ2xDVSxNQUFNRyxTQUFTLENBQ2I7WUFDRUMsTUFBTTtZQUNOQyxPQUFPaEIsUUFBUW9CLE9BQU87UUFDeEI7SUFFSjtJQUdBVCxNQUFNVyxZQUFZO0lBQ2xCLE9BQU9YO0FBQ1g7QUFFQSxPQUFPLFNBQVNZLDJCQUE0QkMsUUFBUTtJQUVsRCxNQUFNYixRQUFRLElBQUlkLGVBQ2pCZSxRQUFRLENBQUMsVUFDVEMsUUFBUSxDQUFDLENBQUMsY0FBYyxDQUFDO0lBRTFCLElBQUlXLFlBQVlBLFNBQVNDLE9BQU8sQ0FBQ0MsTUFBTSxHQUFHLEdBQUc7UUFDM0MsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILFNBQVNDLE9BQU8sQ0FBQ0MsTUFBTSxFQUFFQyxJQUFLO1lBQ2hELE1BQU1DLElBQUlKLFNBQVNDLE9BQU8sQ0FBQ0UsRUFBRTtZQUM3QmhCLE1BQU1HLFNBQVMsQ0FBQztnQkFDZEMsTUFBTSxDQUFDLENBQUMsRUFBRWEsRUFBRUMsR0FBRyxDQUFDLEVBQUUsRUFBRUQsRUFBRUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDNUJiLE9BQU8sQ0FBQyxFQUFFWSxFQUFFRSxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQzVCO1FBQ0Y7SUFDRjtJQUVBbkIsTUFBTVcsWUFBWTtJQUNsQixPQUFPWDtBQUNUO0FBRUEsZUFBZVoscUJBQXFCIn0=