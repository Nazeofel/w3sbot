import { Flashcore } from "@roboplay/robo.js";
import { ActionRowBuilder, ModalBuilder, TextInputBuilder, TextInputStyle } from "discord.js";
export const config = {
    description: 'Send a message to a channel',
    options: [
        {
            name: 'message_channel',
            description: 'Channel to send a message to',
            type: 'channel',
            required: true
        }
    ]
};
export const messageModal = async ()=>{
    const modal = new ModalBuilder().setCustomId('custom_message').setTitle('Send a message to a channel');
    const content = new TextInputBuilder().setCustomId('message').setLabel("Message content").setStyle(TextInputStyle.Paragraph).setRequired(true).setPlaceholder('Your message content here! It supports discord markdown!').setMinLength(1).setMaxLength(4000);
    const firstActionRow = new ActionRowBuilder().addComponents(content);
    modal.addComponents(firstActionRow);
    return {
        modal: modal
    };
};
export default (async (interaction)=>{
    const channel = interaction.options.getChannel('message_channel');
    if (channel && channel.isTextBased()) {
        await Flashcore.set('message_channel_id', channel.id);
        const modal = await messageModal();
        await interaction.showModal(modal.modal);
    } else {
        return {
            content: `Invalid channel provided`,
            ephemeral: true
        };
    }
    try {} catch (error) {
        console.log(error);
    }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxQcm9qZWt0aVxcZGlzY29yZC1ib3RzXFx3M2JvdFxcc3JjXFxjb21tYW5kc1xcbWVzc2FnZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGbGFzaGNvcmUsIHR5cGUgQ29tbWFuZENvbmZpZyB9IGZyb20gJ0Byb2JvcGxheS9yb2JvLmpzJztcclxuaW1wb3J0IHsgQWN0aW9uUm93QnVpbGRlciwgQ2hhdElucHV0Q29tbWFuZEludGVyYWN0aW9uLCBHdWlsZENoYW5uZWwsIE1vZGFsQnVpbGRlciwgVGV4dElucHV0QnVpbGRlciwgVGV4dElucHV0U3R5bGUgfSBmcm9tICdkaXNjb3JkLmpzJztcclxuXHJcbmV4cG9ydCBjb25zdCBjb25maWc6IENvbW1hbmRDb25maWcgPSB7XHJcbiAgZGVzY3JpcHRpb246ICdTZW5kIGEgbWVzc2FnZSB0byBhIGNoYW5uZWwnLFxyXG4gIG9wdGlvbnM6IFtcclxuICAgIHtcclxuICAgICAgbmFtZTogJ21lc3NhZ2VfY2hhbm5lbCcsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnQ2hhbm5lbCB0byBzZW5kIGEgbWVzc2FnZSB0bycsXHJcbiAgICAgIHR5cGU6ICdjaGFubmVsJyxcclxuICAgICAgcmVxdWlyZWQ6IHRydWVcclxuICAgIH0sXHJcbiAgXVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgbWVzc2FnZU1vZGFsID0gYXN5bmMgKCkgPT4ge1xyXG4gIGNvbnN0IG1vZGFsID0gbmV3IE1vZGFsQnVpbGRlcigpXHJcbiAgLnNldEN1c3RvbUlkKCdjdXN0b21fbWVzc2FnZScpXHJcbiAgLnNldFRpdGxlKCdTZW5kIGEgbWVzc2FnZSB0byBhIGNoYW5uZWwnKTtcclxuXHJcbiAgY29uc3QgY29udGVudCA9IG5ldyBUZXh0SW5wdXRCdWlsZGVyKClcclxuICAgIC5zZXRDdXN0b21JZCgnbWVzc2FnZScpXHJcbiAgICAuc2V0TGFiZWwoXCJNZXNzYWdlIGNvbnRlbnRcIilcclxuICAgIC5zZXRTdHlsZShUZXh0SW5wdXRTdHlsZS5QYXJhZ3JhcGgpXHJcbiAgICAuc2V0UmVxdWlyZWQodHJ1ZSlcclxuICAgIC5zZXRQbGFjZWhvbGRlcignWW91ciBtZXNzYWdlIGNvbnRlbnQgaGVyZSEgSXQgc3VwcG9ydHMgZGlzY29yZCBtYXJrZG93biEnKVxyXG4gICAgLnNldE1pbkxlbmd0aCgxKVxyXG4gICAgLnNldE1heExlbmd0aCg0MDAwKTtcclxuXHJcbiAgY29uc3QgZmlyc3RBY3Rpb25Sb3cgPSBuZXcgQWN0aW9uUm93QnVpbGRlcigpLmFkZENvbXBvbmVudHMoY29udGVudCk7XHJcblxyXG4gIG1vZGFsLmFkZENvbXBvbmVudHMoZmlyc3RBY3Rpb25Sb3cgYXMgYW55KTtcclxuICByZXR1cm4ge1xyXG4gICAgbW9kYWw6IG1vZGFsLFxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKGludGVyYWN0aW9uOiBDaGF0SW5wdXRDb21tYW5kSW50ZXJhY3Rpb24pID0+IHtcclxuICBjb25zdCBjaGFubmVsID0gaW50ZXJhY3Rpb24ub3B0aW9ucy5nZXRDaGFubmVsKCdtZXNzYWdlX2NoYW5uZWwnKSBhcyBHdWlsZENoYW5uZWw7XHJcbiAgaWYgKGNoYW5uZWwgJiYgY2hhbm5lbC5pc1RleHRCYXNlZCgpKSB7XHJcbiAgICBhd2FpdCBGbGFzaGNvcmUuc2V0KCdtZXNzYWdlX2NoYW5uZWxfaWQnLCBjaGFubmVsLmlkKTtcclxuICAgIGNvbnN0IG1vZGFsID0gYXdhaXQgbWVzc2FnZU1vZGFsKCk7XHJcbiAgICBhd2FpdCBpbnRlcmFjdGlvbi5zaG93TW9kYWwobW9kYWwubW9kYWwpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4ge2NvbnRlbnQ6IGBJbnZhbGlkIGNoYW5uZWwgcHJvdmlkZWRgLCBlcGhlbWVyYWw6IHRydWV9O1xyXG4gIH1cclxuICB0cnkge1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmxvZyhlcnJvcilcclxuICB9XHJcbn0iXSwibmFtZXMiOlsiRmxhc2hjb3JlIiwiQWN0aW9uUm93QnVpbGRlciIsIk1vZGFsQnVpbGRlciIsIlRleHRJbnB1dEJ1aWxkZXIiLCJUZXh0SW5wdXRTdHlsZSIsImNvbmZpZyIsImRlc2NyaXB0aW9uIiwib3B0aW9ucyIsIm5hbWUiLCJ0eXBlIiwicmVxdWlyZWQiLCJtZXNzYWdlTW9kYWwiLCJtb2RhbCIsInNldEN1c3RvbUlkIiwic2V0VGl0bGUiLCJjb250ZW50Iiwic2V0TGFiZWwiLCJzZXRTdHlsZSIsIlBhcmFncmFwaCIsInNldFJlcXVpcmVkIiwic2V0UGxhY2Vob2xkZXIiLCJzZXRNaW5MZW5ndGgiLCJzZXRNYXhMZW5ndGgiLCJmaXJzdEFjdGlvblJvdyIsImFkZENvbXBvbmVudHMiLCJpbnRlcmFjdGlvbiIsImNoYW5uZWwiLCJnZXRDaGFubmVsIiwiaXNUZXh0QmFzZWQiLCJzZXQiLCJpZCIsInNob3dNb2RhbCIsImVwaGVtZXJhbCIsImVycm9yIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsU0FBUyxRQUE0QixvQkFBb0I7QUFDbEUsU0FBU0MsZ0JBQWdCLEVBQTZDQyxZQUFZLEVBQUVDLGdCQUFnQixFQUFFQyxjQUFjLFFBQVEsYUFBYTtBQUV6SSxPQUFPLE1BQU1DLFNBQXdCO0lBQ25DQyxhQUFhO0lBQ2JDLFNBQVM7UUFDUDtZQUNFQyxNQUFNO1lBQ05GLGFBQWE7WUFDYkcsTUFBTTtZQUNOQyxVQUFVO1FBQ1o7S0FDRDtBQUNILEVBQUM7QUFFRCxPQUFPLE1BQU1DLGVBQWU7SUFDMUIsTUFBTUMsUUFBUSxJQUFJVixlQUNqQlcsV0FBVyxDQUFDLGtCQUNaQyxRQUFRLENBQUM7SUFFVixNQUFNQyxVQUFVLElBQUlaLG1CQUNqQlUsV0FBVyxDQUFDLFdBQ1pHLFFBQVEsQ0FBQyxtQkFDVEMsUUFBUSxDQUFDYixlQUFlYyxTQUFTLEVBQ2pDQyxXQUFXLENBQUMsTUFDWkMsY0FBYyxDQUFDLDREQUNmQyxZQUFZLENBQUMsR0FDYkMsWUFBWSxDQUFDO0lBRWhCLE1BQU1DLGlCQUFpQixJQUFJdEIsbUJBQW1CdUIsYUFBYSxDQUFDVDtJQUU1REgsTUFBTVksYUFBYSxDQUFDRDtJQUNwQixPQUFPO1FBQ0xYLE9BQU9BO0lBQ1Q7QUFDRixFQUFDO0FBRUQsZUFBZSxDQUFBLE9BQU9hO0lBQ3BCLE1BQU1DLFVBQVVELFlBQVlsQixPQUFPLENBQUNvQixVQUFVLENBQUM7SUFDL0MsSUFBSUQsV0FBV0EsUUFBUUUsV0FBVyxJQUFJO1FBQ3BDLE1BQU01QixVQUFVNkIsR0FBRyxDQUFDLHNCQUFzQkgsUUFBUUksRUFBRTtRQUNwRCxNQUFNbEIsUUFBUSxNQUFNRDtRQUNwQixNQUFNYyxZQUFZTSxTQUFTLENBQUNuQixNQUFNQSxLQUFLO0lBQ3pDLE9BQU87UUFDTCxPQUFPO1lBQUNHLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQztZQUFFaUIsV0FBVztRQUFJO0lBQzlEO0lBQ0EsSUFBSSxDQUNKLEVBQUUsT0FBT0MsT0FBTztRQUNkQyxRQUFRQyxHQUFHLENBQUNGO0lBQ2Q7QUFDRixDQUFBLEVBQUMifQ==